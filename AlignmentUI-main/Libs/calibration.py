import cv2
import glob
import os
import numpy as np
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
from reportlab.lib.pagesizes import A4, A3
from datetime import datetime
import json


class Calibration:
    def __init__(self):
        pass

    @staticmethod
    def create_aruco(squares_x, squares_y, target_square_mm, target_marker_mm, aruco_dict, 
                    paper_size="A4", dpi=600, filename="Settings/CalibrationSettings/charuco_board.pdf"):
        target_square_px = (target_square_mm / 25.4) * dpi
        target_marker_px = (target_marker_mm / 25.4) * dpi
        
        square_px = round(target_square_px)
        marker_px = round(target_marker_px)
        
        actual_square_mm = (square_px * 25.4) / dpi
        actual_marker_mm = (marker_px * 25.4) / dpi
        
        print(f"üéØ Target square: {target_square_mm}mm ‚Üí Actual: {actual_square_mm:.4f}mm (diff: {actual_square_mm-target_square_mm:.4f}mm)")
        print(f"üéØ Target marker: {target_marker_mm}mm ‚Üí Actual: {actual_marker_mm:.4f}mm (diff: {actual_marker_mm-target_marker_mm:.4f}mm)")

        dictionary = cv2.aruco.getPredefinedDictionary(aruco_dict)
        board = cv2.aruco.CharucoBoard(
            size=(squares_x, squares_y),
            squareLength=square_px,
            markerLength=marker_px,
            dictionary=dictionary
        )

        width_px = squares_x * square_px
        height_px = squares_y * square_px
        img = board.generateImage((width_px, height_px))

        tmp_png = "Settings/CalibrationSettings/_tmp_charuco.png"
        cv2.imwrite(tmp_png, img)

        marker_width_mm = squares_x * target_square_mm
        marker_height_mm = squares_y * target_square_mm

        page_w, page_h = A3 if paper_size.upper() == "A3" else A4

        x_offset = (page_w - marker_width_mm * mm) / 2
        y_offset = (page_h - marker_height_mm * mm) / 2

        c = canvas.Canvas(filename, pagesize=(page_w, page_h))
        c.drawImage(tmp_png, x_offset, y_offset, marker_width_mm * mm, marker_height_mm * mm)
        c.showPage()
        c.save()

        print(f"‚úÖ ƒê√£ t·∫°o Charuco {squares_x}x{squares_y}, k√≠ch th∆∞·ªõc CH√çNH X√ÅC {marker_width_mm}mm x {marker_height_mm}mm, cƒÉn gi·ªØa tr√™n {paper_size}")
        print(f"üìÑ L∆∞u t·∫°i: {filename}")
        
        return img
    
    @staticmethod
    def collect_charuco_corners(image_folder, board, dictionary):
        all_corners = []
        all_ids = []
        image_size = None
        drawn_images = []

        for fname in glob.glob(os.path.join(image_folder, '*.jpg')):
            img = cv2.imread(fname)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            image_size = gray.shape[::-1]

            corners, ids, _ = cv2.aruco.detectMarkers(gray, dictionary)

            if ids is not None and len(corners) > 0:
                _, charuco_corners, charuco_ids = cv2.aruco.interpolateCornersCharuco(corners, ids, gray, board)

                if charuco_ids is not None and len(charuco_ids) > 3:
                    all_corners.append(charuco_corners)
                    all_ids.append(charuco_ids)

                    vis_img = img.copy()
                    cv2.aruco.drawDetectedMarkers(vis_img, corners, ids)
                    cv2.aruco.drawDetectedCornersCharuco(vis_img, charuco_corners, charuco_ids, (0, 0, 255))
                    drawn_images.append(vis_img)

        return all_corners, all_ids, image_size, drawn_images


    @staticmethod
    def calibrate_camera_from_charuco(all_corners, all_ids, board, image_size,
                                    save_path_matrix=f'Settings/CalibrationSettings/camera_matrix.npy',
                                    save_path_dist=f'Settings/CalibrationSettings/dist_coeffs.npy'):
        ret, camera_matrix, dist_coeffs, rvecs, tvecs = cv2.aruco.calibrateCameraCharuco(
            charucoCorners=all_corners,
            charucoIds=all_ids,
            board=board,
            imageSize=image_size,
            cameraMatrix=None,
            distCoeffs=None
        )

        print("Calibration successful:", ret)
        print("Camera Matrix:\n", camera_matrix)
        print("Distortion Coefficients:\n", dist_coeffs)
        
        np.save(save_path_matrix, camera_matrix)
        np.save(save_path_dist, dist_coeffs)

        return camera_matrix, dist_coeffs
    
    @staticmethod
    def setup_world_coordinate_system(img, board, dictionary,
                                    save_path="Settings/CalibrationSettings/homography_matrix.npz",
                                    output_image_path="Settings/CalibrationSettings/world_coordinate_visualization.jpg"):
        
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        output_img = img.copy()
        
        _corners, _ids, _ = cv2.aruco.detectMarkers(gray, dictionary)
        
        if _ids is not None and len(_corners) > 0:
            ids, corners = Calibration.sort_aruco_by_position(_ids, _corners)
            
            ids = np.array(ids, dtype=np.int32).reshape(-1, 1)
            
            _, charuco_corners, charuco_ids = cv2.aruco.interpolateCornersCharuco(corners, ids, gray, board)
            
            if charuco_ids is not None and len(charuco_ids) > 3:
                # L·∫•y k√≠ch th∆∞·ªõc board
                squares_x, squares_y = board.getChessboardSize()
                square_length_mm = board.getSquareLength()
                
                # QUAN TR·ªåNG: S·ªë corners = (squares_x - 1) √ó (squares_y - 1)
                corners_per_row = squares_x - 1  # S·ªë corner tr√™n m·ªói h√†ng
                corners_per_col = squares_y - 1  # S·ªë corner tr√™n m·ªói c·ªôt
                
                # T√¨m corner v·ªõi id == 0 l√†m g·ªëc t·ªça ƒë·ªô
                origin_idx = None
                origin_point = None
                origin_row = 0
                origin_col = 0
                
                for i, corner_id in enumerate(charuco_ids.flatten()):
                    if corner_id == 0:
                        origin_idx = i
                        origin_point = charuco_corners[i][0]
                        # Corner ID=0 lu√¥n ·ªü v·ªã tr√≠ (0, 0) trong grid corners
                        origin_row = 0
                        origin_col = 0
                        break
                
                if origin_idx is None:
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y corner v·ªõi ID=0, s·ª≠ d·ª•ng corner ƒë·∫ßu ti√™n l√†m g·ªëc")
                    origin_idx = 0
                    origin_point = charuco_corners[0][0]
                    origin_id = charuco_ids[0].flatten()[0]
                    # T√≠nh row/col cho corner ƒë·∫ßu ti√™n
                    origin_row = origin_id // corners_per_row
                    origin_col = origin_id % corners_per_row
                
                # T√≠nh t·ªça ƒë·ªô g·ªëc trong h·ªá mm
                origin_x_mm = origin_col * square_length_mm
                origin_y_mm = origin_row * square_length_mm
                
                object_points = []
                image_points = []
                
                # Dictionary ƒë·ªÉ l∆∞u mapping t·ª´ (row, col) ƒë·∫øn index trong charuco_corners
                corner_map = {}
                
                # V·∫Ω c√°c ƒëi·ªÉm v√† t·ªça ƒë·ªô world
                for i, corner_id in enumerate(charuco_ids.flatten()):
                    # T√≠nh row v√† col t·ª´ corner ID
                    # Corner ID = row * corners_per_row + col
                    row = corner_id // corners_per_row
                    col = corner_id % corners_per_row
                    
                    # L∆∞u mapping
                    corner_map[(row, col)] = i
                    
                    # T√≠nh t·ªça ƒë·ªô world v·ªõi g·ªëc t·∫°i corner ID=0
                    x_mm = (col * square_length_mm) - origin_x_mm
                    y_mm = (row * square_length_mm) - origin_y_mm
                    
                    object_points.append([x_mm, y_mm, 0])
                    image_points.append(charuco_corners[i][0])
                    
                    # V·∫Ω ƒëi·ªÉm tr√™n ·∫£nh
                    point = tuple(charuco_corners[i][0].astype(int))
                    
                    if corner_id == 0:
                        # V·∫Ω g·ªëc t·ªça ƒë·ªô m√†u ƒë·ªè, to h∆°n
                        cv2.circle(output_img, point, 8, (0, 0, 255), -1)
                        cv2.putText(output_img, "ORIGIN (0,0)", 
                                (point[0] + 10, point[1] - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 255), 2)
                    else:
                        # V·∫Ω c√°c ƒëi·ªÉm kh√°c m√†u xanh l√°
                        cv2.circle(output_img, point, 5, (0, 255, 0), -1)
                    
                    # Hi·ªÉn th·ªã t·ªça ƒë·ªô world (x, y) t√≠nh b·∫±ng mm
                    coord_text = f"({x_mm:.0f},{y_mm:.0f})"
                    cv2.putText(output_img, coord_text, 
                            (point[0] + 10, point[1] + 5),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 255, 0), 1)
                    
                    # Hi·ªÉn th·ªã ID c·ªßa corner v√† v·ªã tr√≠ (row,col)
                    id_text = f"ID:{corner_id}[{row},{col}]"
                    cv2.putText(output_img, id_text,
                            (point[0] + 10, point[1] + 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.3, (255, 0, 255), 1)
                
                # V·∫Ω c√°c tr·ª•c t·ªça ƒë·ªô t·ª´ g·ªëc
                if origin_point is not None:
                    origin_pt = tuple(origin_point.astype(int))
                    
                    # T√¨m ƒëi·ªÉm ƒë·ªÉ v·∫Ω tr·ª•c X (c√πng h√†ng v·ªõi origin, c·ªôt k·∫ø ti·∫øp)
                    # ƒêi·ªÉm ti·∫øp theo theo tr·ª•c X: (origin_row, origin_col + 1)
                    x_next_row = origin_row
                    x_next_col = origin_col + 1
                    
                    if (x_next_row, x_next_col) in corner_map:
                        x_idx = corner_map[(x_next_row, x_next_col)]
                        x_axis_point = tuple(charuco_corners[x_idx][0].astype(int))
                        cv2.arrowedLine(output_img, origin_pt, x_axis_point, 
                                    (0, 0, 255), 3, tipLength=0.1)
                        cv2.putText(output_img, "X", x_axis_point,
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                        
                        # Debug info
                        x_corner_id = charuco_ids[x_idx].flatten()[0]
                        print(f"üìç Tr·ª•c X: t·ª´ corner ID={0} ƒë·∫øn corner ID={x_corner_id}")
                    
                    # T√¨m ƒëi·ªÉm ƒë·ªÉ v·∫Ω tr·ª•c Y (c√πng c·ªôt v·ªõi origin, h√†ng k·∫ø ti·∫øp)
                    # ƒêi·ªÉm ti·∫øp theo theo tr·ª•c Y: (origin_row + 1, origin_col)
                    y_next_row = origin_row + 1
                    y_next_col = origin_col
                    
                    if (y_next_row, y_next_col) in corner_map:
                        y_idx = corner_map[(y_next_row, y_next_col)]
                        y_axis_point = tuple(charuco_corners[y_idx][0].astype(int))
                        cv2.arrowedLine(output_img, origin_pt, y_axis_point,
                                    (0, 255, 0), 3, tipLength=0.1)
                        cv2.putText(output_img, "Y", y_axis_point,
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                        
                        # Debug info
                        y_corner_id = charuco_ids[y_idx].flatten()[0]
                        print(f"üìç Tr·ª•c Y: t·ª´ corner ID={0} ƒë·∫øn corner ID={y_corner_id}")
                
                object_points = np.array(object_points, dtype=np.float32)
                image_points = np.array(image_points, dtype=np.float32)
                
                # T√≠nh homography matrix
                homography_matrix, _ = cv2.findHomography(image_points, object_points[:, :2])
                
                # L∆∞u homography matrix
                np.savez(save_path, homography_matrix=homography_matrix)
                
                # L∆∞u ·∫£nh visualization
                cv2.imwrite(output_image_path, output_img)
                
                # Th√™m th√¥ng tin l√™n ·∫£nh
                info_text = f"World Coordinate System - Origin at ID=0"
                cv2.putText(output_img, info_text, (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
                cv2.putText(output_img, f"Unit: mm | Board: {squares_x}x{squares_y} squares", (10, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                cv2.putText(output_img, f"Corners: {corners_per_row}x{corners_per_col} = {corners_per_row*corners_per_col} total", (10, 90),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                
                print(f"‚úÖ Thi·∫øt l·∫≠p h·ªá t·ªça ƒë·ªô th·∫ø gi·ªõi th√†nh c√¥ng")
                print(f"üìã Board: {squares_x}√ó{squares_y} squares ‚Üí {corners_per_row}√ó{corners_per_col} corners")
                print(f"üéØ G·ªëc t·ªça ƒë·ªô ƒë·∫∑t t·∫°i corner ID=0")
                print(f"üìç S·ªë corner m·ªói h√†ng: {corners_per_row}")
                print(f"üìç S·ªë corner m·ªói c·ªôt: {corners_per_col}")
                print("Homography Matrix:\n", homography_matrix)
                print(f"üìÑ Ma tr·∫≠n l∆∞u t·∫°i: {save_path}")
                print(f"üñºÔ∏è ·∫¢nh visualization l∆∞u t·∫°i: {output_image_path}")
                
                return homography_matrix, output_img
            else:
                print("‚ùå Kh√¥ng ƒë·ªß ChArUco corners")
                return None, None
        else:
            print("‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c ArUco markers")
            return None, None   
        
    @staticmethod
    def sort_aruco_by_position(ids, corners):
        # K·∫øt h·ª£p corners v√† ids
        combined = list(zip(ids, corners))

        # Sort theo ID
        combined.sort(key=lambda x: x[0])
        
        # T√°ch l·∫°i
        sorted_ids, sorted_corners = zip(*combined)

        return sorted_ids, sorted_corners